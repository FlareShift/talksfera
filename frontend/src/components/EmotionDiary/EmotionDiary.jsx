import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './EmotionDiary.css';

export function EmotionDiary() {
  const [text, setText] = useState('');
  const [mood, setMood] = useState(5);
  const [date, setDate] = useState('');
  const [entries, setEntries] = useState([]); // –•—Ä–∞–Ω–∏–º –∑–∞–ø–∏—Å–∏

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access-—Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh-—Ç–æ–∫–µ–Ω
  const refreshAccessToken = async () => {
    try {
      const refreshToken = localStorage.getItem("refresh_token");
      if (!refreshToken) throw new Error("No refresh token found");

      const response = await fetch("http://127.0.0.1:8000/api/token/refresh/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ refresh: refreshToken }),
      });

      const data = await response.json();
      if (data.access) {
        localStorage.setItem("access_token", data.access);
        console.log("üîÑ Token refreshed successfully!");
        return data.access;
      } else {
        console.error("‚ö†Ô∏è Failed to refresh token:", data);
      }
    } catch (error) {
      console.error("‚ùå Error refreshing token:", error);
    }
    return null;
  };

  // üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π —ç–º–æ—Ü–∏–π
  useEffect(() => {
    const fetchEntries = async () => {
      let token = localStorage.getItem("access_token");
      if (!token) token = await refreshAccessToken(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

      fetch('http://127.0.0.1:8000/api/emotions/', {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => res.json())
      .then((data) => setEntries(data))
      .catch((err) => console.error("‚ö†Ô∏è Fetch error:", err));
    };

    fetchEntries();
  }, []);

  // üîπ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  const addEntry = async () => {
    if (text.trim() && mood !== '' && date) {
      let token = localStorage.getItem("access_token");
      if (!token) token = await refreshAccessToken(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞

      const newEntry = { note: text, mood, date };

      console.log("üì§ Sending request with token:", token);

      fetch('http://127.0.0.1:8000/api/note/emotions/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(newEntry),
      })
      .then((res) => {
        if (res.status === 401) {
          console.error("‚ö†Ô∏è Unauthorized! Token might be expired.");
          return refreshAccessToken().then(newToken => {
            if (newToken) {
              return fetch('http://127.0.0.1:8000/api/note/emotions/', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  Authorization: `Bearer ${newToken}`,
                },
                body: JSON.stringify(newEntry),
              });
            } else {
              throw new Error("Failed to refresh token, user needs to re-login.");
            }
          });
        }
        return res;
      })
      .then((res) => res.json())
      .then((data) => {
        setEntries([...entries, data]);
        setText('');
        setMood(5);
        setDate('');
        console.log("‚úÖ Entry added successfully:", data);
      })
      .catch((err) => console.error("‚ùå Error adding entry:", err));
    }
  };

  return (
    <div className="emotion-mood-diary">
      <h2>–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</h2>
      <div className="entry-inputs">
        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="–ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏..."
          className="emotion-diary-textarea"
        />
        <div className="mood-scale">
          <label>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (0 - –ü–ª–æ—Ö–æ–µ, 10 - –û—Ç–ª–∏—á–Ω–æ–µ):</label>
          <div className="mood-slider-container">
            <input
              type="range"
              min="0"
              max="10"
              value={mood}
              onChange={(e) => setMood(e.target.value)}
              className="mood-range"
            />
            <span className="mood-value">{mood}</span>
          </div>
        </div>
        <input
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          className="date-input"
        />
      </div>

      <div className="button-group">
        <button onClick={addEntry} className="add-entry-button">
          –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
        </button>

        <div className="history-button">
          <Link to="/emotion-history" className="history-link">
            <button className="add-entry-button">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π</button>
          </Link>
        </div>
      </div>

      <ul>
        {entries.map((entry) => (
          <li key={entry.id}>
            {entry.date}: {entry.mood} - {entry.note}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default EmotionDiary;
